"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessManager = exports.ProcessListManager = void 0;
const jsonfile_1 = require("jsonfile");
const pm2 = require("pm2");
const util_1 = require("util");
const config_1 = require("../config");
const utils_1 = require("./utils");
/**
 * Manage the file containing the running processes list
 */
exports.ProcessListManager = {
    addProcess: async (configProcess) => {
        const configData = exports.ProcessListManager.getProcesses();
        if (!configData.find((conf) => conf.name === configProcess.name && conf.port === configProcess.port)) {
            configData.push(configProcess);
            return await (0, jsonfile_1.writeFile)(config_1.Config.processesFilePath, configData, {
                spaces: 2
            });
        }
    },
    getProcesses: () => {
        let configProcesses = [];
        try {
            configProcesses = (0, jsonfile_1.readFileSync)(config_1.Config.processesFilePath);
        }
        catch (error) {
            (0, jsonfile_1.writeFileSync)(config_1.Config.processesFilePath, configProcesses);
        }
        return configProcesses;
    },
    updateProcesses: async (processes) => {
        const configProcesses = processes.length > 0 ? exports.ProcessListManager.getProcesses() : [];
        processes.forEach((process) => {
            configProcesses.filter((conf) => conf.name === process.name);
        });
        return await (0, jsonfile_1.writeFile)(config_1.Config.processesFilePath, configProcesses, {
            spaces: 2
        });
    },
    deleteProcess: (name) => {
        let configProcesses = exports.ProcessListManager.getProcesses();
        configProcesses = configProcesses.filter((data) => data.name !== name);
        (0, jsonfile_1.writeFileSync)(config_1.Config.processesFilePath, configProcesses, { spaces: 2 });
    }
};
/**
 * Promisify PM2 methods
 */
exports.ProcessManager = {
    list: async () => {
        const processes = await (0, util_1.promisify)(pm2.list.bind(pm2))();
        const filteredProcesses = (0, utils_1.filterProcesses)(processes);
        await exports.ProcessListManager.updateProcesses(filteredProcesses);
        return filteredProcesses;
    },
    start: ((0, util_1.promisify)(pm2.start.bind(pm2))),
    delete: (0, util_1.promisify)(pm2.delete.bind(pm2)),
    disconnect: pm2.disconnect.bind(pm2)
};
//# sourceMappingURL=process-manager.js.map