"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDirname = exports.promptEnvironmentChoice = exports.portIsValid = exports.portInUse = exports.filterProcesses = exports.transformEnvironmentName = exports.logProcesses = void 0;
const cli_ux_1 = require("cli-ux");
const inquirer_1 = require("inquirer");
const isPortReachable = require("is-port-reachable");
const path_1 = require("path");
const prettyBytes = require("pretty-bytes");
const common_constants_1 = require("../constants/common.constants");
const process_manager_1 = require("./process-manager");
/**
 * Display a list of running processes information
 *
 * @param processes
 */
const logProcesses = (processes) => {
    const configProcesses = process_manager_1.ProcessListManager.getProcesses();
    cli_ux_1.cli.table(processes, {
        name: {
            minWidth: 10
        },
        id: {
            minWidth: 5,
            get: (row) => row.pm_id
        },
        status: {
            minWidth: 10,
            get: (row) => { var _a; return (_a = row.pm2_env) === null || _a === void 0 ? void 0 : _a.status; }
        },
        cpu: {
            minWidth: 7,
            get: (row) => { var _a; return (_a = row.monit) === null || _a === void 0 ? void 0 : _a.cpu; }
        },
        memory: {
            minWidth: 10,
            get: (row) => { var _a; return (((_a = row.monit) === null || _a === void 0 ? void 0 : _a.memory) ? prettyBytes(row.monit.memory) : 0); }
        },
        hostname: {
            minWidth: 15,
            get: (row) => { var _a; return (_a = configProcesses.find((data) => data.name === row.name)) === null || _a === void 0 ? void 0 : _a.hostname; }
        },
        port: {
            minWidth: 7,
            get: (row) => { var _a; return (_a = configProcesses.find((data) => data.name === row.name)) === null || _a === void 0 ? void 0 : _a.port; }
        },
        endpointPrefix: {
            minWidth: 25,
            header: 'API prefix',
            get: (row) => { var _a; return (_a = configProcesses.find((data) => data.name === row.name)) === null || _a === void 0 ? void 0 : _a.endpointPrefix; }
        }
    }, {
        printLine: console.log
    });
};
exports.logProcesses = logProcesses;
/**
 * Transform an environment name to be used as a process name
 *
 * @param environmentName
 */
const transformEnvironmentName = (environmentName) => `${common_constants_1.processPrefix}${environmentName
    .trim()
    .toLowerCase()
    .replace(/[ \/\\]/g, '-') || 'mock'}`;
exports.transformEnvironmentName = transformEnvironmentName;
/**
 * Filter processes by name and keep only the one prefixed with 'mockoon-'
 * @param processes
 */
const filterProcesses = (processes) => processes.filter((process) => { var _a; return (_a = process.name) === null || _a === void 0 ? void 0 : _a.includes(common_constants_1.processPrefix); });
exports.filterProcesses = filterProcesses;
/**
 * Check if a port is already in use
 * @param port
 */
const portInUse = async (port, hostname) => await isPortReachable(port, { host: hostname });
exports.portInUse = portInUse;
/**
 * Check if a port is valid
 *
 * @param port
 */
const portIsValid = (port) => port >= 0 && port < 65536;
exports.portIsValid = portIsValid;
/**
 * Check if --index or --name flag are provided and
 * prompt user to choose an environment if not.
 * If there is only one environment, launch it by default
 *
 * @param flags
 * @param environments
 */
const promptEnvironmentChoice = async (flags, environments) => {
    if (flags.index === undefined && !flags.name) {
        if (environments.length === 1) {
            flags.index = 0;
        }
        else {
            const response = await (0, inquirer_1.prompt)([
                {
                    name: 'environmentIndex',
                    message: 'Please select an environment',
                    type: 'list',
                    choices: environments.map((environment, environmentIndex) => ({
                        name: environment.name || environmentIndex,
                        value: environmentIndex
                    }))
                }
            ]);
            flags.index = response.environmentIndex;
        }
    }
    return flags;
};
exports.promptEnvironmentChoice = promptEnvironmentChoice;
/**
 * Get the path directory, except if it's a URL.
 *
 * @param path
 * @returns
 */
const getDirname = (path) => {
    if (!path.startsWith('http')) {
        return (0, path_1.dirname)(path);
    }
    return null;
};
exports.getDirname = getDirname;
//# sourceMappingURL=utils.js.map