import { Command, flags } from '@oclif/command';
export default class Start extends Command {
    static description: string;
    static examples: string[];
    static flags: {
        pname: flags.IOptionFlag<string | undefined>;
        hostname: flags.IOptionFlag<string | undefined>;
        'daemon-off': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        /**
         * /!\ Undocumented flag.
         * Mostly for internal use when `start `command is called during
         * a Docker image build.
         *
         * When using the `dockerize` command, file loading, validity checks,
         * migrations, etc. are all performed, and the single environment is
         * extracted in a separated file next to the generated Dockerfile.
         * It's easier to directly provide this file to the `start` command run
         * from the Dockerfile when building the Docker image rather than
         * having the image build failing due to a failure in the `start` command.
         */
        container: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        data: flags.IOptionFlag<string>;
        name: flags.IOptionFlag<string | undefined>;
        index: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        port: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        all: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'log-transaction': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        repair: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
    };
    run(): Promise<void>;
    private runEnvironment;
    private addProcessToProcessListManager;
    private logStartedProcess;
    /**
     * Start the mock server and run it in the same process in the foreground.
     * We don't use PM2 here to manage the process
     *
     * @param environmentInfo
     * @returns
     */
    private startForegroundProcess;
    /**
     * Start the mock server and manage the process with PM2
     *
     * @param environmentInfo
     * @returns
     */
    private startManagedProcess;
    private handleProcessError;
    private getEnvironmentInfoList;
    private getEnvInfoListFromContainerFlag;
    private getEnvInfoListFromNonContainerFlag;
    private getEnvInfoFromEnvironments;
    private getEnvInfoFromUserChoice;
    private validateName;
    private validatePort;
}
