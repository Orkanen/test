"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const util_1 = require("util");
const command_constants_1 = require("../constants/command.constants");
const messages_constants_1 = require("../constants/messages.constants");
const process_manager_1 = require("../libs/process-manager");
const utils_1 = require("../libs/utils");
class List extends command_1.Command {
    async run() {
        const { args } = this.parse(List);
        try {
            let processes = await process_manager_1.ProcessManager.list();
            if (args.id !== undefined) {
                processes = processes.filter((process) => process.pm_id === parseInt(args.id, 10) || process.name === args.id);
            }
            if (processes.length) {
                (0, utils_1.logProcesses)(processes);
            }
            else {
                this.log(args.id
                    ? (0, util_1.format)(messages_constants_1.Messages.CLI.NO_RUNNING_PROCESS_FOUND, args.id)
                    : messages_constants_1.Messages.CLI.NO_RUNNING_PROCESS);
            }
        }
        catch (error) {
            this.error(error.message);
        }
        finally {
            process_manager_1.ProcessManager.disconnect();
        }
    }
}
exports.default = List;
List.description = 'List running mock APIs';
List.examples = [
    '$ mockoon-cli list',
    '$ mockoon-cli info',
    '$ mockoon-cli list 0',
    '$ mockoon-cli list "Mock_environment"'
];
List.flags = Object.assign({}, command_constants_1.commonFlags);
List.args = [
    {
        name: 'id',
        description: 'Running API pid or name',
        required: false
    }
];
List.aliases = ['info'];
//# sourceMappingURL=list.js.map